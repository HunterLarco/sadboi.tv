#import 'external/Playbill.graphql'
#import 'external/User.graphql'
#import 'external/UserHandle.graphql'

type BroadcastEvent {
  id: ID!
  timestamp: DateTime!
  details: BroadcastEventDetails!
}

type BroadcastEventDetails {
  # A broadcast event can contain multiple specializations, instead of using a
  # union type which doesn't play nicely with Prisma and codegen-mappers, we
  # enumerate the possibilities here assuming only one is set.
  chatMessage: ChatMessageEvent
  userHandleChange: UserHandleChangeEvent
  userEnterChat: UserEnterChatEvent
  startShow: StartShowEvent
}

### ChatMessageEvent

"""
Indicates that a chat message has been sent,
"""
type ChatMessageEvent {
  author: User!

  """
  Handles can change in the middle of a chat conversation. If clients wish to
  show chat history with the chat handles used at the time each message was
  sent, this field preserves that data.
  """
  preservedHandle: UserHandle!

  payload: ChatMessagePayload!
}

type ChatMessagePayload {
  # A chat message can contain multiple specializations, instead of using a
  # union type which doesn't play nicely with Prisma and codegen-mappers, we
  # enumerate the possibilities here assuming only one is set.
  text: ChatMessageTextPayload
}

type ChatMessageTextPayload {
  value: String!
}

### UserHandleChangeEvent

"""
Indicates that a user changed their chat handle (be it name, color, or
something else that changed).
"""
type UserHandleChangeEvent {
  user: User!

  before: UserHandle!
  after: UserHandle!
}

### UserEnterChatEvent

"""
Indicates that a user entered the chat.
"""
type UserEnterChatEvent {
  user: User!

  """
  Handles can change in the middle of a chat conversation. If clients wish to
  show chat history with the chat handles used at the time each message was
  sent, this field preserves that data.
  """
  preservedHandle: UserHandle!
}

### StartShowEvent

type StartShowEvent {
  playbill: Playbill!
}

### Scalars

scalar DateTime
