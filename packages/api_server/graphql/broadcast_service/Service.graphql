#import 'BroadcastEvent.graphql'

type Subscription {
  """
  Subscription for all broadcast events (show start times, chat messages,
  etc...).
  """
  broadcastEvent: BroadcastEvent!
}

type Query {
  """
  Used in conjunction with `broadcastEvent` subscription to load previously sent
  events.
  """
  broadcastEventHistory(
    request: BroadcastEventHistoryRequest!
  ): BroadcastEventHistoryResponse!
}

type Mutation {
  enterChat: EnterChatResponse!
  sendChatMessage(request: SendChatMessageRequest!): SendChatMessageResponse!
}

### viewingRoomHistory

input BroadcastEventHistoryRequest {
  cursor: ID
}

type BroadcastEventHistoryResponse {
  events: [BroadcastEvent!]!
  nextPageCursor: ID
}

### sendChatMessage

input SendChatMessageRequest {
  payload: SendChatMessagePayload!
}

input SendChatMessagePayload {
  # Only one of the following must be defined.
  text: SendChatMessageTextPayload
}

input SendChatMessageTextPayload {
  value: String!
}

type SendChatMessageResponse {
  event: BroadcastEvent!
}

### enterChat

type EnterChatResponse {
  event: BroadcastEvent!
}
