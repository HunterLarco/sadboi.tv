#import 'ChatMessage.graphql'
#import 'ViewingRoomEvent.graphql'
#import 'WaitingRoomEvent.graphql'

type Subscription {
  """
  Prior to a show starting, users can visit sadboi and chat globally while they
  wait for match making to begin. This is served by the "waiting room".
  Eventually a signal is sent with a room ID allowing users to transition into
  individual viewing rooms.
  """
  waitingRoom: WaitingRoomEvent!

  """
  A viewing room is a group of users all watching content together. This
  subscription will send events related to chats, playbill, etc...

  See `waitingRoom` for additional context.
  """
  viewingRoom(id: ID!): ViewingRoomEvent!
}

type Mutation {
  sendChatMessage(request: SendChatMessageRequest!): SendChatMessageResponse!
}

### sendChatMessage

input SendChatMessageRequest {
  """
  When empty, will attempt to send the message to the waiting room.
  """
  room: ID

  payload: String!
}

type SendChatMessageResponse {
  message: ChatMessage!
}
