/// User

model User {
  id String @id @map("_id")

  handle UserHandle

  dateCreated DateTime @default(now())
}

type UserHandle {
  name String

  selectedColor UserHandleColor
  availableColors UserHandleColor[]

  selectedBadges UserBadge[]
  availableBadges UserBadge[]
}

enum UserHandleColor {
  Unknown
  Green
  Turquoise
  Lavender
  Violet
  Pink
  Red
  Orange
  Yellow

  // A special sadbot-only color + style.
  SadBot
}

enum UserBadge {
  Unknown

  // A special sadbot-only badge.
  SadBot
}

/// ViewingRoomEvent

model ViewingRoomEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  room String

  type ViewingRoomEventType
  details ViewingRoomEventDetails

  timestamp DateTime @default(now())

  @@index([room, timestamp])
}

enum ViewingRoomEventType {
  ChatMessage
  UserHandleChange
}

type ViewingRoomEventDetails {
  chatMessage ChatMessageEvent?
  userHandleChange UserHandleChangeEvent?
}

type ChatMessageEvent {
  authorId String

  preservedHandle PreservedUserHandle

  payload ChatMessagePayload
}

type ChatMessagePayload {
  text String
}

type PreservedUserHandle {
  name String
  color UserHandleColor
  badges UserBadge[]
}

type UserHandleChangeEvent {
  old PreservedUserHandle
  new PreservedUserHandle
}

/// AuthToken

model AuthToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  scopes AuthScope[]

  // If not set, the token never expires.
  expiry DateTime?

  dateIssued DateTime @default(now())
}

type AuthScope {
  code AuthScopeCode

  // Optional foreign key designating a target for the scope. For example, if
  // this scope provides DOCUMENT_EDITING permissions, the target might be a
  // document key--whereas for a PASSWORD_RESET permission, the target might be
  // a user key.
  target String
}

enum AuthScopeCode {
  UserAuth // target is the userId
}

/// Counters

model Counters {
  name String @id @map("_id")
  count Int @default(0)
}

/// MessageHistory

model MessageHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message String

  dateCreated DateTime @default(now())
}

/// Prisma configuration

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
